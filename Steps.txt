Challenge 1

1. I set up Docker on my computer so I could run containers.

2. Made an account on Docker Hub for storing and managing my Docker images.

3. Went on GitHub and forked the provided repository to get my own copy to work on.

4. Opened the challenge1 folder. This is where I’ll be working.

5. Inside challenge1, I made a new folder called public to keep my web page files.

6.In the public folder, I created an index.html file and wrote the code for html file and put my name and student ID in it.

7.I then created a Dockerfile in the challenge1 directory. 
8. Ran the command docker build -t mausami/simple-web . to create a Docker image called mausami/simple-web.

9 To get my web server running, I used docker run -d -p 8080:80 mausami/simple-web.

10. I used the docker ps command to see my running containers and confirm everything was set up correctly.

11. Opened Docker Desktop, clicked the local link 8080:80, and checked my static site at localhost:8080.

12. Captured a screenshot showing my static website with my name and student ID displayed.

13. Finally, I pushed all my new changes, including the index.html and Dockerfile, to my GitHub repository under the challenge1 directory.

Challenge 2

1. I started by downloading the challenge2 zip folder from D2L and saved it on my computer.

2. I extracted the files from the zip and put them into the challenge2 directory.

3. I made a Dockerfile in the directory and filled in the necessary code to build my container.
4. Next, I created a docker-compose.yml file to handle the Docker setup for the challenge.

5. Coding wasn’t smooth; I had to fix mistakes a few times. It was tough figuring out what went wrong, but after several tries and deletions, I corrected the errors.

6. I added a default.conf file and coded it for the Nginx server settings.

7. Running docker-compose up --build gave me errors at first.

8. I noticed on Docker Desktop that a previous server was running, which caused conflicts. So, I stopped it and tried the command again.

9. The errors kept coming, and it took me a while to work out what the issue was.

10. After a long struggle, I fixed the code. I brought everything down with docker-compose down and then rebuilt with docker-compose up --build. Finally, I got the message that the server was running on port 3000.

11. I opened my browser and entered localhost:3000/api/books to see if the challenge was completed successfully. It worked!

12. Took all the necessary screenshots of the terminal and the browser with the API working.

13. Uploaded all my changes and new files for challenge2 to my GitHub repository to wrap it up.